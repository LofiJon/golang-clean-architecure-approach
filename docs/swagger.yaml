basePath: /
definitions:
  dtos.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  dtos.PageableDto:
    properties:
      items: {}
      page:
        type: integer
      size:
        type: integer
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  models.Task:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      done:
        type: boolean
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  requests.TaskRequest:
    properties:
      done:
        type: boolean
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This API is an approach of clean architecture using Golang made by
    Jonathan Malagueta
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Golang Clean Architecture Example
  version: "1.0"
paths:
  /tasks:
    get:
      consumes:
      - application/json
      description: Get all tasks registered
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal error
          schema:
            type: string
      summary: Get all tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task with the input payload
      parameters:
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/requests.TaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal error
          schema:
            type: string
      summary: Create a new task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      description: Delete task by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Internal error
          schema:
            type: string
      summary: Delete task by id
      tags:
      - tasks
    get:
      description: Get a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Internal error
          schema:
            type: string
      summary: Get a task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/requests.TaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.HTTPError'
      summary: Update a task by ID
      tags:
      - tasks
  /tasks/paged:
    get:
      consumes:
      - application/json
      description: Get paginated tasks
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items per page
        in: query
        name: per_page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.PageableDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.HTTPError'
      summary: Get paginated tasks
      tags:
      - tasks
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
